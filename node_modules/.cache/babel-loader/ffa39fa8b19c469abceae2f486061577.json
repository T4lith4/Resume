{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = merge; // The default allowed delta for keyframe distance\n\nvar keyframeDistance = 10;\nvar defaultNormalizedFrames = {\n  'from': 'from',\n  '0%': 'from',\n  'to': 'to',\n  '100%': 'to'\n};\n/**\r\n * Takes an array of strings representing transform values and\r\n * merges them. Ignores duplicates and 'none'.\r\n * @param {Array} transforms Array<string>\r\n * @returns {String} merged\r\n * @private\r\n * @example\r\n * mergeTransforms([\r\n *   'translateX(10px)',\r\n *   'rotateX(120deg)',\r\n *   'translateX(10px)',\r\n *   'none',\r\n * ])\r\n * // -> 'translateX(10px) rotateX(120deg)'\r\n *\r\n */\n\nvar mergeTransforms = function mergeTransforms(transforms) {\n  var filtered = transforms.filter(function (transform, i) {\n    return transform !== 'none' && transforms.indexOf(transform) === i;\n  });\n  return filtered.join(' ');\n};\n/**\r\n * Returns whichever value is actually defined\r\n * @param {String|Number} primary CSSValue\r\n * @param {String|Number} secondary CSSValue\r\n * @returns {String|Number} defined CSSValue\r\n * @private\r\n */\n\n\nvar getDefined = function getDefined(primary, secondary) {\n  return typeof primary !== 'undefined' ? primary : secondary;\n};\n/**\r\n * Takes a source animation and the current cache, populating the\r\n * cache with the normalized keyframes and returning a copy of the\r\n * source animation with the normalized keyframes as well.\r\n *\r\n * It uses keyframeDistance to determine how much it should normalize\r\n * frames.\r\n * @param {Object} source Animation\r\n * @param {Object} cache FrameMap\r\n * @returns {Object} Animation\r\n * @private\r\n */\n\n\nvar normalizeFrames = function normalizeFrames(source, cache) {\n  var normalized = {};\n\n  for (var frame in source) {\n    var normalizedFrame = defaultNormalizedFrames[frame] || Math.round(parseFloat(frame) / keyframeDistance) * keyframeDistance + '%';\n    normalized[normalizedFrame] = source[frame];\n    cache[normalizedFrame] = normalizedFrame;\n  }\n\n  return normalized;\n};\n\nvar mergeFrames = function mergeFrames(primaryFrame, secondaryFrame, target) {\n  // Walk through all properties in the primary frame\n  for (var propertyName in primaryFrame) {\n    // Transform is special cased, as we want to combine both\n    // transforms when posssible.\n    if (propertyName === 'transform') {\n      // But we dont need to do anything if theres no other\n      // transform to merge.\n      if (secondaryFrame[propertyName]) {\n        var newTransform = mergeTransforms([primaryFrame[propertyName], secondaryFrame[propertyName]]); // We make the assumption that animations use 'transform: none'\n        // to terminate the keyframe. If we're combining two animations\n        // that may terminate at separte frames, its safest to just\n        // ignore this.\n\n        if (newTransform !== 'none') {\n          target[propertyName] = newTransform;\n        }\n      } else {\n        var propertyValue = getDefined(primaryFrame[propertyName], secondaryFrame[propertyName]);\n        target[propertyName] = propertyValue;\n      }\n    } else {\n      // Use a typeof check so we don't ignore falsy values like 0.\n      var _propertyValue = getDefined(primaryFrame[propertyName], secondaryFrame[propertyName]);\n\n      target[propertyName] = _propertyValue;\n    }\n  } // Walk through all properties in the secondary frame.\n  // We should be able to assume that any property that\n  // needed to be merged has already been merged when we\n  // walked the primary frame.\n\n\n  for (var _propertyName in secondaryFrame) {\n    var _propertyValue2 = secondaryFrame[_propertyName]; // Again, ignore 'transform: none'\n\n    if (_propertyName === 'transform' && _propertyValue2 === 'none') {\n      continue;\n    }\n\n    target[_propertyName] = target[_propertyName] || _propertyValue2;\n  }\n};\n\nvar populateDefinedFrame = function populateDefinedFrame(primaryFrame, secondaryFrame) {\n  var definedFrame = primaryFrame || secondaryFrame;\n  var target = {};\n\n  for (var propertyName in definedFrame) {\n    var propertyValue = definedFrame[propertyName]; // Again, ignore 'transform: none'\n\n    if (propertyName === 'transform' && propertyValue === 'none') {\n      continue;\n    }\n\n    target[propertyName] = propertyValue;\n  } // Only define a frame if there are actual styles to apply\n\n\n  if (Object.keys(target).length) {\n    return target;\n  }\n\n  return null;\n};\n/**\r\n * Merge lets you take two Animations and merge them together. It\r\n * iterates through each animation and merges each keyframe. It\r\n * special cases the `transform` property and uses string interop.\r\n * to merge the two transforms.\r\n *\r\n * This is *at your own risk* and will not work with animations\r\n * that are clearly opposites (fadeIn and fadeOut).\r\n *\r\n * @param {Object} primary Animation\r\n * @param {Object} secondary Animation\r\n * @returns {Object} merged Animation\r\n * @example\r\n * import { merge, tada, flip } from 'react-animations';\r\n * const tadaFlip = merge(tada, flip);\r\n */\n\n\nfunction merge(primary, secondary) {\n  // A map used to track the normalized frame value in cases where\n  // two animations contain frames that appear closely, but not exactly\n  var normalizedFrames = {}; // We merge each frame into a new object and return it\n\n  var merged = {};\n  var normalizedPrimary = normalizeFrames(primary, normalizedFrames);\n  var normalizedSecondary = normalizeFrames(secondary, normalizedFrames); // Iterate all normalized frames\n\n  for (var frame in normalizedFrames) {\n    var primaryFrame = normalizedPrimary[frame];\n    var secondaryFrame = normalizedSecondary[frame]; // Create a new frame object if it doesn't exist.\n\n    var target = merged[frame] || (merged[frame] = {}); // If both aniatmions define this frame, merge them carefully\n\n    if (primaryFrame && secondaryFrame) {\n      mergeFrames(primaryFrame, secondaryFrame, target);\n    } else {\n      // Otherwise find the defined frime and populate all properties\\\n      // except for \"transform\" when the value is none.\n      var keyframe = populateDefinedFrame(primaryFrame, secondaryFrame);\n\n      if (keyframe) {\n        merged[frame] = keyframe;\n      }\n    }\n  }\n\n  return merged;\n}","map":null,"metadata":{},"sourceType":"script"}